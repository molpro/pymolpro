{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3484c3bd",
   "metadata": {},
   "source": [
    "# Evaluate charge density at the atomic nuclei"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10f4a3b5",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "## Do an electronic structure calculation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "22b8911d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-11-16T06:37:42.945450Z",
     "start_time": "2023-11-16T06:37:42.718856Z"
    }
   },
   "outputs": [],
   "source": [
    "from pymolpro import Project\n",
    "\n",
    "p = Project(\"evaluate_charge_density\")\n",
    "p.write_input('''\n",
    "basis,cc-pVQZ\n",
    "geometry={f;h,f,2.732}\n",
    "set,sewprop=0\n",
    "gexpec,delta,f\n",
    "gexpec,delta,h\n",
    "{casscf;closed,2}\n",
    "put,xml\n",
    "''')\n",
    "p.run(wait=True)\n",
    "assert p.status == 'completed'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c25f4fb1",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "## Evaluate occupied orbitals then density on a grid at the nuclear positions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8a1dce6a",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "pycharm": {
     "name": "#%%\n"
    },
    "ExecuteTime": {
     "end_time": "2023-11-16T06:37:42.955830Z",
     "start_time": "2023-11-16T06:37:42.949186Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 atoms:\n",
      "a1 F [0.0, 0.0, -0.13764095117233568]\n",
      "a2 H [0.0, 0.0, 2.5943590488276578]\n",
      "Calculated densities at the nuclei: [4.39672987e+02 2.46536665e-01]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "atoms = p.geometry()\n",
    "print(str(len(atoms)) + ' atoms:')\n",
    "for atom in atoms:\n",
    "    print(atom['id'], atom['elementType'], atom['xyz'])\n",
    "\n",
    "points = [atom['xyz'] for atom in atoms]\n",
    "orbitalsAtPoints = p.evaluateOrbitals(points)\n",
    "\n",
    "results = np.zeros(len(points), dtype=np.float64)\n",
    "for orbital in orbitalsAtPoints:\n",
    "    for ipoint in range(len(orbital['values'])):\n",
    "        results[ipoint] += orbital['values'][ipoint] ** 2 * orbital['occ']\n",
    "\n",
    "print(\"Calculated densities at the nuclei:\", results)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1021bbc1",
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "source": [
    "## Check that the densities at the nuclei agree with values calculated directly in Molpro"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ea2405df",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    },
    "ExecuteTime": {
     "end_time": "2023-11-16T06:37:42.959391Z",
     "start_time": "2023-11-16T06:37:42.956978Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "From Molpro: DELTA(F) = 439.672986652897\n",
      "... nearest to result  0  which differs by  -9.092104846786242e-09\n",
      "From Molpro: DELTA(H) = 0.246536669511579\n",
      "... nearest to result  1  which differs by  -4.210600063059289e-09\n"
     ]
    }
   ],
   "source": [
    "for answer in p.xpath('//property[contains(@name,\"DELTA\")]'):\n",
    "    name = answer.xpath('@name')[0]\n",
    "    value = float(answer.xpath('@value')[0])\n",
    "    print('From Molpro:', name, '=', value)\n",
    "    closest = (np.abs((results - value))).argmin()\n",
    "    print('... nearest to result ', closest, ' which differs by ', results[closest] - value)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
