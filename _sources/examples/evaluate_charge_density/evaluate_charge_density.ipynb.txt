{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3484c3bd",
   "metadata": {},
   "source": [
    "# Evaluate charge density at the atomic nuclei"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "22b8911d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pymolpro import Project\n",
    "p = Project(\"evaluate_charge_density\")\n",
    "p.write_input('geometry={f;h,f,1.732};set,sewprop=0;gexpec,delta,f;gexpec,delta,h;rhf;put,xml')\n",
    "p.run(wait=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3ae5f843",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Molecule M62825DC\n",
      "2 atoms:\n",
      "a1 F 0.0 0.0 -0.461759661234695E-01\n",
      "a2 H 0.0 0.0 0.870358963160526\n",
      "Calculated densities at the nuclei:\n",
      "[4.28636645e+02 3.39348457e-01]\n"
     ]
    }
   ],
   "source": [
    "from pymolpro.grid import evaluateOrbitals\n",
    "import numpy as np\n",
    "\n",
    "document = p.xpath('/*')[0]\n",
    "default_ns_name='molpro-output'\n",
    "namespaces = {k if k is not None else default_ns_name: v for k, v in document.nsmap.items()}\n",
    "\n",
    "for answer in document.xpath('//molpro-output:variables/molpro-output:variable[@name=\"_ANGSTROM\"]/molpro-output:value',\n",
    "                             namespaces=namespaces):\n",
    "    Angstrom = np.float64(answer.text)\n",
    "\n",
    "molecule = document.xpath('//molpro-output:job/molpro-output:molecule', namespaces=namespaces)[0]\n",
    "\n",
    "print('Molecule ' + molecule.get('id'))\n",
    "\n",
    "atoms = molecule.xpath('cml:molecule/cml:atomArray/cml:atom', namespaces=namespaces)\n",
    "points = np.zeros((len(atoms), 3), dtype=np.float64)\n",
    "print(str(len(atoms)) + ' atoms:')\n",
    "ids = np.empty(len((atoms)), dtype='a4')\n",
    "elementTypes = np.empty((len(atoms)), dtype='a4')\n",
    "iatom = 0\n",
    "for atom in atoms:\n",
    "    print(atom.get('id') + ' ' + atom.get('elementType') + ' ' + atom.get('x3') + ' ' + atom.get(\n",
    "        'y3') + ' ' + atom.get('z3'))\n",
    "    ids[iatom] = atom.get('id')\n",
    "    elementTypes[iatom] = atom.get('elementType')\n",
    "    points[iatom, :] = [np.float64(atom.get('x3')) * Angstrom, np.float64(atom.get('y3')) * Angstrom,\n",
    "                        np.float64(atom.get('z3')) * Angstrom]\n",
    "    iatom += 1\n",
    "\n",
    "orbitalsAtPoints = evaluateOrbitals(molecule, points)\n",
    "results = np.zeros(len(points), dtype=np.float64)\n",
    "for orbital in orbitalsAtPoints:\n",
    "    for ipoint in range(len(points)):\n",
    "        results[ipoint] += orbital['values'][ipoint] ** 2 * orbital['occ']\n",
    "\n",
    "print(\"Calculated densities at the nuclei:\")\n",
    "print(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ea2405df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "From Molpro: DELTA(F) = 428.636645143173\n",
      "... nearest to result  0  which differs by  1.9895196601282805e-12\n",
      "From Molpro: DELTA(H) = 0.339348457217733\n",
      "... nearest to result  1  which differs by  1.1102230246251565e-16\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "for answer in document.xpath('//molpro-output:property[contains(@name,\"DELTA\")]', namespaces=namespaces):\n",
    "    name = answer.xpath('@name', namespaces=namespaces)[0]\n",
    "    value = answer.xpath('@value', namespaces=namespaces)[0]\n",
    "    print('From Molpro:', name, '=', value)\n",
    "    closeness = 10000000000\n",
    "    for ipoint in range(len(points)):\n",
    "        distance = math.sqrt((results[ipoint] - np.float64(value)) ** 2)\n",
    "        if distance < closeness:\n",
    "            closeness = distance\n",
    "            closest = ipoint\n",
    "    print('... nearest to result ', closest, ' which differs by ', closeness)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "064fdd66",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
