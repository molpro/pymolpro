{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Thermochemical Benchmark: closed shell reactions with core correlation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bak et al., [J. Chem. Phys. 112, 9229â€“9242 (2000)](https://doi.org/10.1063/1.481544)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-05-02T16:11:23.145554Z",
     "start_time": "2023-05-02T16:11:22.846308Z"
    }
   },
   "outputs": [],
   "source": [
    "import pymolpro\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-05-02T16:11:23.147738Z",
     "start_time": "2023-05-02T16:11:23.146634Z"
    }
   },
   "outputs": [],
   "source": [
    "backend = 'local'  # If preferred, change this to one of the backends in your ~/.sjef/molpro/backends.xml that is ssh-accessible\n",
    "project_name = 'Bak2000_reactions'\n",
    "parallel = None  # how many jobs to run at once"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-05-02T16:11:23.150551Z",
     "start_time": "2023-05-02T16:11:23.149070Z"
    }
   },
   "outputs": [],
   "source": [
    "methods = ['HF', 'MP2', 'CCSD', 'CCSD(T)', 'CCSD(T)-F12A', 'CCSD(T)-F12B', 'CCSD(T)-F12C']\n",
    "bases = ['cc-pCVDZ', 'cc-pCVTZ', 'cc-pCVQZ', 'cc-pCV5Z']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-05-02T16:11:23.153117Z",
     "start_time": "2023-05-02T16:11:23.151605Z"
    }
   },
   "outputs": [],
   "source": [
    "db = pymolpro.database.load(\"Bak2000_reactions\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-05-02T16:11:43.062661Z",
     "start_time": "2023-05-02T16:11:23.155646Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [],
   "source": [
    "results = {}\n",
    "for method in methods:\n",
    "    results[method] = {}\n",
    "    for basis in bases:\n",
    "        if 'F12' not in method or '5' not in basis:\n",
    "            results[method][basis] = pymolpro.database.run(db, method=method, basis=basis + '-F12' if 'F12' in method else basis,\n",
    "                                                           location=project_name, backend=backend,\n",
    "                                                           core_correlation=\"small\", parallel=parallel)\n",
    "            if results[method][basis].failed: print(method, basis, 'failed', results[method][basis].project_directory)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "for method in methods:\n",
    "    for result in pymolpro.database.basis_extrapolate(results[method].values(), results['HF'].values()):\n",
    "        results[method][result.basis] = result\n",
    "    for basis in results[method]:\n",
    "        if basis not in bases: bases.append(basis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-05-02T16:11:43.329847Z",
     "start_time": "2023-05-02T16:11:43.068472Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HF/cc-pCV[45]Z</th>\n",
       "      <th>MP2/cc-pCV[45]Z</th>\n",
       "      <th>CCSD/cc-pCV[45]Z</th>\n",
       "      <th>CCSD(T)/cc-pCV[45]Z</th>\n",
       "      <th>CCSD(T)-F12A/cc-pCVQZ-F12</th>\n",
       "      <th>CCSD(T)-F12B/cc-pCVQZ-F12</th>\n",
       "      <th>CCSD(T)-F12C/cc-pCVQZ-F12</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MAD</th>\n",
       "      <td>29.06</td>\n",
       "      <td>15.42</td>\n",
       "      <td>9.93</td>\n",
       "      <td>1.19</td>\n",
       "      <td>1.12</td>\n",
       "      <td>1.13</td>\n",
       "      <td>1.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MAXD</th>\n",
       "      <td>113.66</td>\n",
       "      <td>51.83</td>\n",
       "      <td>17.75</td>\n",
       "      <td>3.49</td>\n",
       "      <td>2.27</td>\n",
       "      <td>2.11</td>\n",
       "      <td>3.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RMSD</th>\n",
       "      <td>40.69</td>\n",
       "      <td>21.57</td>\n",
       "      <td>11.04</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1.27</td>\n",
       "      <td>1.25</td>\n",
       "      <td>1.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MSD</th>\n",
       "      <td>9.25</td>\n",
       "      <td>-11.94</td>\n",
       "      <td>-6.81</td>\n",
       "      <td>-0.83</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0.02</td>\n",
       "      <td>-0.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>STDEVD</th>\n",
       "      <td>41.24</td>\n",
       "      <td>18.70</td>\n",
       "      <td>9.04</td>\n",
       "      <td>1.22</td>\n",
       "      <td>1.32</td>\n",
       "      <td>1.30</td>\n",
       "      <td>1.38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        HF/cc-pCV[45]Z  MP2/cc-pCV[45]Z  CCSD/cc-pCV[45]Z  \\\n",
       "MAD              29.06            15.42              9.93   \n",
       "MAXD            113.66            51.83             17.75   \n",
       "RMSD             40.69            21.57             11.04   \n",
       "MSD               9.25           -11.94             -6.81   \n",
       "STDEVD           41.24            18.70              9.04   \n",
       "\n",
       "        CCSD(T)/cc-pCV[45]Z  CCSD(T)-F12A/cc-pCVQZ-F12  \\\n",
       "MAD                    1.19                       1.12   \n",
       "MAXD                   3.49                       2.27   \n",
       "RMSD                   1.43                       1.27   \n",
       "MSD                   -0.83                      -0.00   \n",
       "STDEVD                 1.22                       1.32   \n",
       "\n",
       "        CCSD(T)-F12B/cc-pCVQZ-F12  CCSD(T)-F12C/cc-pCVQZ-F12  \n",
       "MAD                          1.13                       1.21  \n",
       "MAXD                         2.11                       3.00  \n",
       "RMSD                         1.25                       1.38  \n",
       "MSD                          0.02                      -0.40  \n",
       "STDEVD                       1.30                       1.38  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('display.float_format', lambda x: '%.2f' % x)\n",
    "method_errors = \\\n",
    "    pymolpro.database.analyse([results[method]['cc-pCVQZ' if 'F12' in method else 'cc-pCV[45]Z'] for method in methods],\n",
    "                              db, 'kJ/mol')['reaction statistics']\n",
    "with open(project_name + '.method_errors.tex', 'w') as tf:\n",
    "    tf.write(\n",
    "        '\\\\ifx\\\\toprule\\\\undefined\\\\def\\\\toprule{\\\\hline\\\\hline}\\n\\\\def\\\\midrule{\\\\hline}\\n\\\\def\\\\bottomrule{\\\\hline\\\\hline}\\\\fi')  # or \\usepackage{booktabs}\n",
    "    tf.write(method_errors.style.format(precision=2).to_latex(hrules=True, multicol_align='c', caption='Method errors'))\n",
    "method_errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-05-02T16:11:43.341730Z",
     "start_time": "2023-05-02T16:11:43.335413Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CCSD(T)/cc-pCVDZ</th>\n",
       "      <th>CCSD(T)/cc-pCVTZ</th>\n",
       "      <th>CCSD(T)/cc-pCVQZ</th>\n",
       "      <th>CCSD(T)/cc-pCV5Z</th>\n",
       "      <th>CCSD(T)/cc-pCV[23]Z</th>\n",
       "      <th>CCSD(T)/cc-pCV[34]Z</th>\n",
       "      <th>CCSD(T)/cc-pCV[45]Z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MAD</th>\n",
       "      <td>36.73</td>\n",
       "      <td>12.05</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1.30</td>\n",
       "      <td>4.37</td>\n",
       "      <td>1.33</td>\n",
       "      <td>1.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MAXD</th>\n",
       "      <td>65.92</td>\n",
       "      <td>21.33</td>\n",
       "      <td>6.97</td>\n",
       "      <td>3.00</td>\n",
       "      <td>10.79</td>\n",
       "      <td>3.15</td>\n",
       "      <td>3.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RMSD</th>\n",
       "      <td>41.66</td>\n",
       "      <td>13.71</td>\n",
       "      <td>4.10</td>\n",
       "      <td>1.50</td>\n",
       "      <td>5.37</td>\n",
       "      <td>1.64</td>\n",
       "      <td>1.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MSD</th>\n",
       "      <td>33.39</td>\n",
       "      <td>11.31</td>\n",
       "      <td>3.02</td>\n",
       "      <td>0.39</td>\n",
       "      <td>2.70</td>\n",
       "      <td>-1.13</td>\n",
       "      <td>-0.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>STDEVD</th>\n",
       "      <td>25.92</td>\n",
       "      <td>8.07</td>\n",
       "      <td>2.88</td>\n",
       "      <td>1.51</td>\n",
       "      <td>4.83</td>\n",
       "      <td>1.23</td>\n",
       "      <td>1.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        CCSD(T)/cc-pCVDZ  CCSD(T)/cc-pCVTZ  CCSD(T)/cc-pCVQZ  \\\n",
       "MAD                36.73             12.05              3.70   \n",
       "MAXD               65.92             21.33              6.97   \n",
       "RMSD               41.66             13.71              4.10   \n",
       "MSD                33.39             11.31              3.02   \n",
       "STDEVD             25.92              8.07              2.88   \n",
       "\n",
       "        CCSD(T)/cc-pCV5Z  CCSD(T)/cc-pCV[23]Z  CCSD(T)/cc-pCV[34]Z  \\\n",
       "MAD                 1.30                 4.37                 1.33   \n",
       "MAXD                3.00                10.79                 3.15   \n",
       "RMSD                1.50                 5.37                 1.64   \n",
       "MSD                 0.39                 2.70                -1.13   \n",
       "STDEVD              1.51                 4.83                 1.23   \n",
       "\n",
       "        CCSD(T)/cc-pCV[45]Z  \n",
       "MAD                    1.19  \n",
       "MAXD                   3.49  \n",
       "RMSD                   1.43  \n",
       "MSD                   -0.83  \n",
       "STDEVD                 1.22  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('display.float_format', lambda x: '%.2f' % x)\n",
    "best_method = 'CCSD(T)'\n",
    "basis_errors = \\\n",
    "    pymolpro.database.analyse([results[best_method][basis] for basis in bases if basis in results[best_method]], db,\n",
    "                              'kJ/mol')['reaction statistics']\n",
    "with open(project_name + '.basis_errors.tex', 'w') as tf:\n",
    "    tf.write(\n",
    "        '\\\\ifx\\\\toprule\\\\undefined\\\\def\\\\toprule{\\\\hline\\\\hline}\\n\\\\def\\\\midrule{\\\\hline}\\n\\\\def\\\\bottomrule{\\\\hline\\\\hline}\\\\fi')  # or \\usepackage{booktabs}\n",
    "    tf.write(basis_errors.style.format(precision=2).to_latex(hrules=True, multicol_align='c', caption='Basis errors'))\n",
    "basis_errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-05-02T16:19:04.164298Z",
     "start_time": "2023-05-02T16:19:03.834871Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x600 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "methods_pruned = [method for method in methods if method != 'HF']\n",
    "bases_pruned = ['cc-pCVTZ', 'cc-pCVQZ', 'cc-pCV5Z', 'cc-pCV[34]Z', 'cc-pCV[45]Z']\n",
    "fig, panes = plt.subplots(nrows=1, ncols=len(bases_pruned), sharey=True, figsize=(18, 6))\n",
    "\n",
    "for pane in range(len(bases_pruned)):\n",
    "    data = []\n",
    "    labels = []\n",
    "    for method in methods_pruned:\n",
    "        if bases_pruned[pane] in results[method] and results[method][bases_pruned[pane]].reaction_energies:\n",
    "            data.append(\n",
    "                pymolpro.database.analyse(results[method][bases_pruned[pane]],\n",
    "                                          db, 'kJ/mol')['reaction energy deviations'].to_numpy()[:, 0]\n",
    "            )\n",
    "            labels.append(method)\n",
    "    panes[pane].violinplot(data, showmeans=True, showextrema=True, vert=True, bw_method='silverman')\n",
    "    panes[pane].set_xticks(range(1, len(labels) + 1), labels=labels, rotation=90)\n",
    "    panes[pane].set_title(bases_pruned[pane])\n",
    "panes[0].set_ylabel('Error / kJ/mol')\n",
    "plt.savefig(project_name + \".violin.pdf\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
